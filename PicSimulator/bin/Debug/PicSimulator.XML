<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PicSimulator</name>
    </assembly>
    <members>
        <member name="F:PicSimulator.Command.commandAll">
            <summary>
            Speichert alle Befehle von gesammten Dokument in deren Reihenfolge
            </summary>
        </member>
        <member name="F:PicSimulator.Command.argumentAll">
            <summary>
            Speichert alle Argumente von gesammten Dokument in deren Reihenfolge
            </summary>
        </member>
        <member name="M:PicSimulator.Command.setCommand(System.String)">
            <summary>
            Einlesen des Befehls
            </summary>
            <param name="command">String mit Befehl und Argument</param>
            <returns>Befehlt (zwei Zeichen)</returns>
        </member>
        <member name="M:PicSimulator.Command.setArgument(System.String)">
            <summary>
            Einlesen des Befehls
            </summary>
            <param name="argument">Befehl und Argument</param>
            <returns>Argument (zwei Zeichen)</returns>
        </member>
        <member name="F:PicSimulator.InstructionType.ADDWF">
            <summary>
            Deklaration Enumerations
            </summary>
            Byte-Oriented   Maske: 0011 1111 0000 0000 --> 3F00
        </member>
        <member name="F:PicSimulator.InstructionType.BCF">
            Bit-Oriented    Mask: 0011 1100 0000 0000 --> 3C00
        </member>
        <member name="F:PicSimulator.InstructionType.ADDLW">
            Literal and control     Mask: 0011 1110 0000 0000
        </member>
        <member name="M:PicSimulator.Instruction.Execute">
            <summary>
            Executes the instruction.
            Uses the String-Format of the type to determine the method which should be used.
            </summary>
            <returns>true when successful, false otherwise</returns>
        </member>
        <member name="M:PicSimulator.Instruction.ToString">
            <summary>
            Returns Instruction in String format.
            </summary>
            <returns>Instruction as String</returns>
        </member>
        <member name="M:PicSimulator.Instruction.ADDWF">
            <summary>
            Executes the ADDWF command.
            </summary>
            <returns>true when successful, false otherwise</returns>
        </member>
        <member name="M:PicSimulator.Form1.dateiLadenToolStrip_Click(System.Object,System.EventArgs)">
            <summary>
            Erstelle neuen PicSimulator und lade Befehle aus LST-Datei.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PicSimulator.Form1.Form1_Load(System.Object,System.EventArgs)">
            <summary>
            Schreibe die Konsolenausgabe in das consoleLog-Fenster.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:PicSimulator.Form1.components">
            <summary>
            Erforderliche Designervariable.
            </summary>
        </member>
        <member name="M:PicSimulator.Form1.Dispose(System.Boolean)">
            <summary>
            Verwendete Ressourcen bereinigen.
            </summary>
            <param name="disposing">True, wenn verwaltete Ressourcen gelöscht werden sollen; andernfalls False.</param>
        </member>
        <member name="M:PicSimulator.Form1.InitializeComponent">
            <summary>
            Erforderliche Methode für die Designerunterstützung.
            Der Inhalt der Methode darf nicht mit dem Code-Editor geändert werden.
            </summary>
        </member>
        <member name="M:PicSimulator.Program.Main">
            <summary>
            Der Haupteinstiegspunkt für die Anwendung.
            </summary>
        </member>
        <member name="T:PicSimulator.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:PicSimulator.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:PicSimulator.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenlookups, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.Update_SizeAndPosition">
            <summary>
            This Sub will run whenever Me.Refresh() is called. It applies the AutoSizing and DockSide settings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.Update_VisibleLineNumberItems">
            <summary>
            This Sub determines which textlines are visible in the ParentRichTextBox, and makes LineNumberItems (LineNumber + ItemRectangle)
            for each visible line. They are put into the zLNIs List that will be used by the OnPaint event to draw the LineNumberItems. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.FindStartIndex(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            FindStartIndex is a recursive Sub (one that calls itself) to compute the first visible line that should have a LineNumber.
            </summary>
            <param name="zMin"> this will hold the eventual BestStartIndex when the Sub has completed its run.</param>
            <param name="zMax"></param>
            <param name="zTarget"></param>
            <remarks></remarks>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint will go through the enabled elements (vertical ReminderMessage, GridLines, LineNumbers, BorderLines, MarginLines) and will
            draw them if enabled. At the same time, it will build GraphicsPaths for each of those elements (that are enabled), which will be used 
            in SeeThroughMode (if it's active): the figures in the GraphicsPaths will form a customized outline for the control by setting them as the 
            Region of the LineNumber control. Note: the vertical ReminderMessages are only drawn during designtime. 
            </summary>
            <param name="e"></param>
            <remarks></remarks>
        </member>
    </members>
</doc>
